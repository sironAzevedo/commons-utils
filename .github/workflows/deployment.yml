name: commons-utils

on:
  push:
    branches: [ main ]

jobs:
  increment-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.increment_version.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Get GitHub Packages versions count
        id: latest_version
        run: |
          REPO="sironAzevedo/commons-utils"
          PACKAGE_NAME="commons-utils"
          AUTH="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
          API_URL="https://api.github.com"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          VERSIONS=$(curl -H "$AUTH" "$API_URL/orgs/$OWNER/packages/maven/$PACKAGE_NAME/versions")
          VERSIONS_COUNT=$(echo "$VERSIONS" | jq '. | length')
          echo "::set-output name=count::$VERSIONS_COUNT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Increment version
        id: increment_version
        run: |
          # Obter a versão atual da linha 9 do pom.xml
          VERSION=$(sed -n '9p' pom.xml | grep -oP '(?<=<version>).*(?=</version>)')

          # Obter a versão mais recente do GitHub Package
          VERSIONS_COUNT="${{ steps.latest_version.outputs.count }}"
          if [ -z "$VERSIONS_COUNT" ]; then
            echo "No latest version found, setting initial version to 1.0.0"
            NEW_VERSION="1.0.0"
          else
            # Remover a palavra "SNAPSHOT" da versão
            VERSION_CLEAN=${VERSION/-SNAPSHOT/}
          
            # Separar a versão em partes
            IFS='.' read -ra ADDR <<< "$VERSION_CLEAN"
            MAJOR=${ADDR[0]}
            MINOR=${ADDR[1]}
          
            # Gerar o PATCH no formato DDMMAAAAHHMMSS
            PATCH=$(date +'%d%m%Y%H%M%S')

            # Montar a nova versão
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi            
          # Atualizar a versão na linha 9 do pom.xml
          sed -i '9s/<version>.*<\/version>/<version>'$NEW_VERSION'<\/version>/' pom.xml
          
          # Exibir a nova versão para depuração
          echo "Updated version: $NEW_VERSION"
          
          # echo "::set-output name=new_version::$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"


      - name: Save updated pom.xml for next steps
        uses: actions/upload-artifact@v4
        with:
          name: updated-pom
          path: pom.xml

  build:
    runs-on: ubuntu-latest
    needs: increment-version
    steps:
      - uses: actions/checkout@v4
      - name: Download updated pom.xml
        uses: actions/download-artifact@v4
        with:
          name: updated-pom
          path: ./
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Build & Compile project
        run: mvn clean compile install -DskipTests

  test:
    runs-on: ubuntu-latest
    needs: [increment-version, build]
    steps:
      - uses: actions/checkout@v4
      - name: Download updated pom.xml
        uses: actions/download-artifact@v3
        with:
          name: updated-pom
          path: ./
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Run unit tests
        run: mvn test

  create_package_github:
    runs-on: ubuntu-latest
    needs: [increment-version, build, test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download updated pom.xml
        uses: actions/download-artifact@v3
        with:
          name: updated-pom
          path: ./
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Configure Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>\${env.GITHUB_ACTOR}</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  comment:
    runs-on: ubuntu-latest
    needs: [increment-version, build, test, create_package_github]
    steps:
      - name: Post comment
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ secrets.GH_TOKEN }}
          title: Nova versão disponibilzada - ${{ needs.increment-version.outputs.new_version }}
          body: "
                  A new version ${{ needs.increment-version.outputs.new_version }} has been created successfully.
                  Acessar a pagina de versões: https://github.com/sironAzevedo/commons-utils/packages/2219278/versions
                "
